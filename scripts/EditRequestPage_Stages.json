{
  "content": "/**\n * Calculates order number for the next stage to add.\n * @param {Request} request - request record.\n * @return {number} calculated order number.\n */\nfunction getNextOrderNumberForApprover(request) {\n  var stages \u003d request.WorkflowStages;\n\n  if (!stages || stages.length \u003d\u003d\u003d 0) {\n    return 1;\n  }\n\n  var max \u003d Math.max.apply(null, stages\n      .map(function(i) { return i.OrderNo; }));\n\n  return max + 1;\n}\n\n\n/**\n * Creates a new workflow stage.\n * @param {Request} request - currently edited request record.\n * @param {Datasource} stageDatasource - relation datasource from request to\n *     stages.\n */\nfunction createStage(request, stageDatasource) {\n  stageDatasource.item.OrderNo \u003d getNextOrderNumberForApprover(request);\n  stageDatasource.item.Status \u003d window.Status.Draft;\n  stageDatasource.createItem();\n}\n\n\n/**\n * Deletes stage after getting user\u0027s consent.\n * @param {Datasource} stageDs - relation datasource from request to\n *     stages.\n */\nfunction deleteStage(stageDs) {\n  if (confirm(\u0027Are you sure?\u0027)) {\n    stageDs.deleteItem();\n  }\n}\n\n\n/**\n * Builds a label for the stage.\n * @param {Number} orderNo - stage number.\n * @param {String} status - stage status.\n * @return {string} stage label.\n */\nfunction getStageLabel(orderNo, status) {\n  var stageLabel \u003d \u0027Stage \u0027 + orderNo;\n\n  if ([window.Status.Pending,\n       window.Status.Rejected].indexOf(status) \u003e -1) {\n    stageLabel +\u003d \u0027 (Current)\u0027;\n  }\n\n  return stageLabel;\n}\n",
  "key": "VOe2IL1PNJn9eD2zyfX4zkCeD95tLcMN",
  "name": "EditRequestPage_Stages",
  "type": "CLIENT"
}