{
  "content": "/**\n * @fileoverview Server script functions to send all kinds of notifications\n * supported by the app.\n *\n * Internal functions only as denoted by _ at the end of names.\n */\n\n\n/**\n * Sends email.\n * @param {string} to - email address of a recipient;\n * @param {string} subject - subject of email message;\n * @param {string} body - body of email message.\n */\nfunction sendEmail_(to, subject, body) {\n  try {\n    console.log(Utilities.formatString(\u0027sendEmail_ %s %s\u0027, to, subject));\n    \n    MailApp.sendEmail({\n      to: to,\n      subject: subject,\n      htmlBody: body,\n      noReply: true\n    });\n  } catch (e) {\n    // Suppressing errors in email sending because email notifications are not critical for the functioning of the app.\n    console.error(JSON.stringify(e));\n  }\n}\n\n\n/**\n * Notifies next approver(s) in chain about the request\n * for approval.\n *\n * @param {Request} request - request to process.\n */\nfunction notifyApproversAboutRequest_(request) {\n  try {\n    var appUrl \u003d ScriptApp.getService().getUrl() + \u0027#Approve\u0027;\n    var settingsRecord \u003d getSettingsRecord_()[0];\n    \n    var subject \u003d settingsRecord.NotificationEmailSubject;\n    var template \u003d HtmlService.createTemplate(settingsRecord.NotificationEmail);\n    template.data \u003d {\n      Request: request,\n      AppUrlApprove: appUrl\n    };\n    var htmlBody \u003d template.evaluate().getContent();\n    \n    var approvers \u003d getNextApprovers_(request);\n\n    approvers.forEach(function(a) {\n      sendEmail_(a.Email, subject, htmlBody);\n    });\n  } catch (e) {\n    // Suppressing errors in email sending because email notifications are not critical for the functioning of the app.\n    console.error(JSON.stringify(e));\n  }\n}\n\n\n/**\n * Notifies owner about the request being approved.\n *\n * @param {Request} request - approved request.\n */\nfunction notifyOwnerAboutRequestApproved_(request) {\n  try {\n    var appUrl \u003d ScriptApp.getService().getUrl() + \u0027#EditRequest?requestId\u003d\u0027 + request._key;\n    var settingsRecord \u003d getSettingsRecord_()[0];\n\n    var subject \u003d settingsRecord.ApprovedEmailSubject;\n    var template \u003d HtmlService.createTemplate(settingsRecord.ApprovedEmail);\n    template.data \u003d {\n      Request: request,\n      AppUrlRequest: appUrl\n    };\n    var htmlBody \u003d template.evaluate().getContent();\n\n    sendEmail_(request.Owner, subject, htmlBody);\n  } catch (e) {\n    // Suppressing errors in email sending because email notifications are not critical for the functioning of the app.\n    console.error(JSON.stringify(e));\n  }\n}\n\n\n/**\n * Notifies owner about the request being rejected.\n *\n * @param {Request} request - rejected request.\n */\nfunction notifyOwnerAboutRequestRejected_(request) {\n  try {\n    var appUrl \u003d ScriptApp.getService().getUrl() + \u0027#EditRequest?requestId\u003d\u0027 + request._key;\n\n    var settingsRecord \u003d getSettingsRecord_()[0];\n\n    var subject \u003d settingsRecord.RejectedEmailSubject;\n    var template \u003d HtmlService.createTemplate(settingsRecord.RejectedEmail);\n    template.data \u003d {\n      Request: request,\n      AppUrlRequest: appUrl\n    };\n    var htmlBody \u003d template.evaluate().getContent();\n    sendEmail_(request.Owner, subject, htmlBody);\n  } catch (e) {\n    // Suppressing errors in email sending because email notifications are not critical for the functioning of the app.\n    console.error(JSON.stringify(e));\n  }\n}\n",
  "key": "5YjBxOyYEic9I6eieO1KtBGYm2SWpPlE",
  "name": "Notifications",
  "type": "SERVER"
}