{
  "content": "/**\n * Sorts the list of Approver objects by the order number.\n *\n * @param {Array\u003cObject\u003e} records - records to sort.\n */\nfunction sortByOrderNo_(records) {\n  var sortApprovers \u003d function(a, b) {\n    if (a.OrderNo \u003c b.OrderNo) {\n      return -1;\n    }\n    if (a.OrderNo \u003e b.OrderNo) {\n      return 1;\n    }\n    return 0;\n  };\n  records.sort(sortApprovers);\n}\n\n\n/**\n * Getting next approver(s) in the chain.\n * @param {Request} request - request record.\n * @return {Array\u003cApprover\u003e} approvers - array of one or\n *     several approvers whose turn is to take action.\n */\nfunction getNextApprovers_(request) {\n  if (request.Status !\u003d\u003d Status.Pending) {\n    throw new Error(\n      Utilities.formatString(\u0027getNextApprovers: wrong status \"%s\" for request \"%s\"\u0027, \n                             request.Status, request._key));\n  }\n  \n  var stages \u003d request.WorkflowStages;\n  sortByOrderNo_(stages);\n  \n  var approvers \u003d [];\n  for (var i \u003d 0; i \u003c stages.length; i++) {\n    for (var j \u003d 0; j \u003c stages[i].Approvers.length; j++) {\n      var approver \u003d stages[i].Approvers[j];\n      if (approver.Status \u003d\u003d\u003d Status.Pending) {\n        approvers.push(approver);\n      }\n    }\n  }\n  return approvers;\n}\n\n\n/**\n * Update list of request\u0027s approvers marking those currently \n * responsible for approval with Pending status.\n *\n * @param {Request} request - request to process.\n */\nfunction initializeNextStageAndApprovers_(request) {\n  var allStages \u003d request.WorkflowStages;\n  sortByOrderNo_(allStages);\n  \n  var updateApproverStatus \u003d function(a) {\n    a.Status \u003d Status.Pending;\n  };\n  \n  var currentLevel \u003d -1;\n  for (var i \u003d 0; i \u003c allStages.length; i++) {\n    var stage \u003d allStages[i];\n    if (stage.Status \u003d\u003d\u003d Status.Draft || stage.Status \u003d\u003d\u003d Status.Pending) {\n      if (currentLevel \u003d\u003d\u003d -1) {\n        currentLevel \u003d stage.OrderNo;\n      }\n      \n      if (currentLevel \u003d\u003d\u003d stage.OrderNo \u0026\u0026 stage.Status \u003d\u003d\u003d Status.Draft) {\n        stage.Status \u003d Status.Pending;\n        stage.Approvers.forEach(updateApproverStatus);\n        \n        app.saveRecords([stage].concat(stage.Approvers));\n      }\n    }\n  }\n}\n\n\n/**\n * Performs close action on the request record.\n * @param {Request} request - request record.\n */\nfunction performRequestClose_(request) {\n  // Placeholder for the close action.\n  // Please enter your code here...\n}\n\n\n/**\n * Closes request.\n * @param {Request} request - request record.\n */\nfunction closeRequest_(request) {\n  if (request.Status \u003d\u003d\u003d Status.Approved) {\n    // Placeholder for close request action.\n    performRequestClose_(request);\n    \n    request.Status \u003d Status.Closed;\n    app.saveRecords([request]);\n  }\n}\n",
  "key": "ASTDT6jwSnvqRIGbjSzcZyoT1oXFcjIz",
  "name": "RequestManagementPrivate",
  "type": "SERVER"
}