{
  "content": "/**\n * Enum with approval statuses.\n */\nvar Status \u003d {\n  Draft: 0,\n  Pending: 1,\n  Approved: 2,\n  Rejected: 3,\n  Skipped: 4,\n  Closed: 5\n};\n\n\n/**\n * Enum with available actions.\n */\nvar Action \u003d {\n  Approve: \u0027Approve\u0027,\n  Reject: \u0027Reject\u0027\n};\n\n\n/**\n * Enum with workflow stage types.\n */\nvar WorkflowStageType \u003d {\n  All: \u0027All\u0027,\n  Any: \u0027Any\u0027\n};\n\n\n/**\n * Performs submit for approval action on a request.\n * Sends required notifications to approver(s).\n *\n * @param {string} requestId - id of the request.\n */\nfunction submitForApproval(requestId) {\n  var request \u003d app.models.Request.getRecord(requestId);\n\n  checkIfCurrentUserCanModifyRequest_(request);\n\n  if ([Status.Draft, Status.Rejected].indexOf(request.Status) \u003d\u003d\u003d -1) {\n    throw new Error(\n      \u0027Request cannot be submitted for approval: wrong status.\u0027);\n  }\n  \n  if (request.Status \u003d\u003d\u003d Status.Rejected) {\n    var rejectedStage \u003d request.WorkflowStages.filter(function(w) {\n      return w.Status \u003d\u003d\u003d Status.Rejected;\n    })[0];\n    rejectedStage.Status \u003d Status.Pending;\n\n    var rejectedApprover \u003d rejectedStage.Approvers.filter(function(a) {\n      return a.Status \u003d\u003d\u003d Status.Rejected;\n    })[0];\n    rejectedApprover.Status \u003d Status.Pending;\n    \n    var rejectedComment \u003d rejectedApprover.Comments.filter(function(c) {\n      return c.IsResolved !\u003d\u003d true \u0026\u0026 c.Action \u003d\u003d\u003d Action.Reject;\n    })[0];\n    rejectedComment.IsResolved \u003d true;\n    rejectedComment.ResolvedOn \u003d new Date();\n    \n    app.saveRecords([rejectedStage, rejectedApprover, rejectedComment]);\n  }\n  \n  request.Status \u003d Status.Pending;\n  app.saveRecords([request]);\n\n  initializeNextStageAndApprovers_(request);\n\n  notifyApproversAboutRequest_(request);\n}\n\n\n/**\n * Performs close action on the request record.\n * @param {string} requestId - request record id.\n */\nfunction closeRequest(requestId) {\n  var request \u003d app.models.Request.getRecord(requestId);\n  \n  checkIfCurrentUserCanModifyRequest_(request);\n  \n  closeRequest_(request);\n}\n\n\n/**\n * Performs approve action on the approval record.\n * Sends required notifications to the next approver(s) and owner.\n *\n * @param {string} approverId - id of the approver;\n * @param {string} opt_commentText - justification comment (optional).\n*/\nfunction approveRequest(approverId, opt_commentText) {\n  var approver \u003d app.models.Approver.getRecord(approverId);\n  \n  checkIfCurrentUserCanApproveRequest_(approver);\n  \n  approver.Status \u003d Status.Approved;\n  approver.LastUpdated \u003d new Date();\n  app.saveRecords([approver]);\n\n  if (opt_commentText) {\n    var comment \u003d app.models.Comment.newRecord();\n    comment.Text \u003d opt_commentText;\n    comment.AddedOn \u003d new Date();\n    comment.Action \u003d Action.Approve;\n    app.saveRecords([comment]);\n    \n    approver.Comments.push(comment); \n    app.saveRecords([approver]);\n  }\n  \n  var stage \u003d approver.WorkflowStage;\n  var request \u003d stage.Request;\n  \n  if (stage.Type \u003d\u003d\u003d WorkflowStageType.All) {\n    var allApproved \u003d stage.Approvers.every(function(a) {\n      return a.Status \u003d\u003d\u003d Status.Approved; });\n    \n    if (allApproved) {\n      stage.Status \u003d Status.Approved;\n      app.saveRecords([stage]);\n    }\n  } else if (stage.Type \u003d\u003d\u003d WorkflowStageType.Any) {\n    if (stage.Status !\u003d\u003d Status.Rejected) {\n      stage.Status \u003d Status.Approved;\n      app.saveRecords([stage]);\n\n\n      var approversToSave \u003d [];\n      for (var i \u003d 0; i \u003c stage.Approvers.length; i++) {\n        if (stage.Approvers[i].Status \u003d\u003d\u003d Status.Pending) {\n          stage.Approvers[i].Status \u003d Status.Skipped;\n          approversToSave.push(stage.Approvers[i]);\n        }\n      }\n      if (approversToSave.length \u003e 0) {\n        app.saveRecords(approversToSave);\n      }\n    }\n  }\n  \n  var allStagesApproved \u003d request.WorkflowStages.every(function(w) {\n    return w.Status \u003d\u003d\u003d Status.Approved; });\n  \n  if (allStagesApproved) {\n    request.Status \u003d Status.Approved;\n    app.saveRecords([request]);\n    \n    notifyOwnerAboutRequestApproved_(request);\n    \n    if (request.AutoClose) {\n      closeRequest_(request);\n    }\n  } else {\n    initializeNextStageAndApprovers_(request);\n    notifyApproversAboutRequest_(request);\n  }\n}\n\n\n/**\n * Performs reject action on the approval record.\n * Sends a notification to the owner.\n *\n * @param {string} approverId - id of the approver;\n * @param {string} - justification comment.\n */\nfunction rejectRequest(approverId, commentText) {\n  var approver \u003d app.models.Approver.getRecord(approverId);\n  \n  checkIfCurrentUserCanModifyApprover_(approver);\n  \n  approver.Status \u003d Status.Rejected;\n  approver.LastUpdated \u003d new Date();\n\n  var comment \u003d app.models.Comment.newRecord();\n  comment.Text \u003d commentText;\n  comment.AddedOn \u003d new Date();\n  comment.Action \u003d Action.Reject;\n  app.saveRecords([comment]);\n    \n  approver.Comments.push(comment); \n  app.saveRecords([approver]);\n\n  var stage \u003d approver.WorkflowStage;\n  stage.Status \u003d Status.Rejected;\n  \n  var request \u003d stage.Request;\n  request.Status \u003d Status.Rejected;\n  \n  app.saveRecords([stage, request]);\n\n  notifyOwnerAboutRequestRejected_(request);\n}\n\n\n/**\n * Performs cancel action on a request.\n *\n * @param {string} requestId - id of the request.\n */\nfunction cancelRequest(requestId) {\n  var request \u003d app.models.Request.getRecord(requestId);\n  \n  checkIfCurrentUserCanModifyRequest_(request);\n  \n  request.Status \u003d Status.Draft;\n  \n  var recordsToSave \u003d [];\n  recordsToSave.push(request);\n  \n  var stages \u003d request.WorkflowStages;\n  \n  for (var i \u003d 0; i \u003c stages.length; i++) {\n    var stage \u003d stages[i];\n    \n    if (stage.Status !\u003d\u003d Status.Draft) {\n      stage.Status \u003d Status.Draft;\n      recordsToSave.push(stage);\n      \n      for (var j \u003d 0; j \u003c stage.Approvers.length; j++) {\n        var approver \u003d stage.Approvers[j];\n        \n        if (approver.Status !\u003d\u003d Status.Draft) {\n          approver.Status \u003d Status.Draft;\n          recordsToSave.push(approver);\n          \n          if (approver.Comments.length \u003e 0) {\n            app.deleteRecords(approver.Comments);\n          }\n        }\n      }\n    }\n  }\n\n  if (recordsToSave.length \u003e 0) {\n    app.saveRecords(recordsToSave);\n  }\n}\n",
  "key": "wxwgNGMLM0EfXGJeVS2A1yscxJuN2nSi",
  "name": "RequestManagement",
  "type": "SERVER"
}